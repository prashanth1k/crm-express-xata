// Generated by Xata Codegen 0.21.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Users",
    columns: [
      { name: "name", type: "string" },
      { name: "email", type: "email" },
      { name: "bio", type: "text" },
    ],
  },
  {
    name: "contact",
    columns: [
      { name: "name", type: "string", notNull: true, defaultValue: "" },
      { name: "email", type: "email" },
      { name: "owner", type: "link", link: { table: "Users" } },
    ],
  },
  {
    name: "activity",
    columns: [
      { name: "description", type: "string" },
      { name: "type", type: "string" },
      { name: "status", type: "string" },
      { name: "owner", type: "link", link: { table: "Users" } },
      { name: "contact", type: "link", link: { table: "contact" } },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes["Users"];
export type UsersRecord = Users & XataRecord;

export type Contact = InferredTypes["contact"];
export type ContactRecord = Contact & XataRecord;

export type Activity = InferredTypes["activity"];
export type ActivityRecord = Activity & XataRecord;

export type DatabaseSchema = {
  Users: UsersRecord;
  contact: ContactRecord;
  activity: ActivityRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://demo-sc2tdr.us-east-1.xata.sh/db/contactdb",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
